{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "35cc89e9",
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 130
    },
    "id": "35cc89e9",
    "outputId": "4a750bd4-e51c-4d84-a04e-e9d2ec547ebb"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.6/dist-packages/pyspark/context.py:238: FutureWarning: Python 3.6 support is deprecated in Spark 3.2.\n",
      "  FutureWarning\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "\n",
       "        <div>\n",
       "            <p><b>SparkContext</b></p>\n",
       "\n",
       "            <p><a href=\"http://maprdemo.mapr.io:4040\">Spark UI</a></p>\n",
       "\n",
       "            <dl>\n",
       "              <dt>Version</dt>\n",
       "                <dd><code>v3.2.3</code></dd>\n",
       "              <dt>Master</dt>\n",
       "                <dd><code>local[1]</code></dd>\n",
       "              <dt>AppName</dt>\n",
       "                <dd><code>lb1</code></dd>\n",
       "            </dl>\n",
       "        </div>\n",
       "        "
      ],
      "text/plain": [
       "<SparkContext master=local[1] appName=lb1>"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from pyspark import SparkContext, SparkConf\n",
    "\n",
    "app_name = \"lb1\"\n",
    "conf = SparkConf().setAppName(app_name).setMaster('local[1]')\n",
    "sc = SparkContext(conf=conf)\n",
    "sc"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "44bc5d05",
   "metadata": {
    "id": "44bc5d05",
    "outputId": "c3801eb3-0e0b-41c1-9c6f-26ad908492b0",
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "!hadoop fs -put /mnt/data /data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "3ebdcbd8",
   "metadata": {
    "id": "3ebdcbd8",
    "outputId": "d8e41ae4-686a-44e4-cec4-bc7acea44e3c",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Found 1 items\r\n",
      "drwxr-xr-x   - root root          0 2022-12-05 17:02 /data/data\r\n"
     ]
    }
   ],
   "source": [
    "!hadoop fs -ls /data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "840d81c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "12851\n"
     ]
    }
   ],
   "source": [
    "warandpeace = sc.textFile(\"warandsociety.txt\")\n",
    "print(warandpeace.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "ac473e6f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Лев Николаевич Толстой',\n",
       " 'Война и мир. Книга 1',\n",
       " '',\n",
       " 'Война и мир – 1',\n",
       " '',\n",
       " ' ',\n",
       " ' http://www.lib.ru',\n",
       " '',\n",
       " 'Аннотация ',\n",
       " '']"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nilFile = sc.textFile(\"nil\")\n",
    "warandpeace.take(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "822a81d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'– Мир заключен… – начал он. Но Наполеон не дал ему говорить. Ему, видно, нужно было говорить самому, одному, и он продолжал говорить с тем красноречием и невоздержанием раздраженности, к которому так склонны балованные люди.'"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "linesWithPeace = warandpeace.filter(lambda x: \"Мир \" in x) \n",
    "linesWithPeace.first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "c0cd3155",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elapsed time: 10771500 ns\n",
      "Elapsed time: 10525499 ns\n"
     ]
    }
   ],
   "source": [
    "def time(f):\n",
    "    import time\n",
    "    t = time.process_time()\n",
    "    f()\n",
    "    print(f\"Elapsed time: {int((time.process_time() - t)*1e9)} ns\")\n",
    "    \n",
    "linesWithPeace.cache()\n",
    "time(lambda: linesWithPeace.count())\n",
    "time(lambda: linesWithPeace.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "3d7ba62c",
   "metadata": {},
   "outputs": [],
   "source": [
    "wordCounts = linesWithPeace\\\n",
    "    .flatMap(lambda line: line.split(\" \"))\\\n",
    "    .map(lambda word: (word, 1))\\\n",
    "    .reduceByKey(lambda a, b: a + b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "320419db",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('–', 2), ('говорить', 2), ('и', 2), ('Мир', 1), ('заключен…', 1)]"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "wordCounts.top(5, lambda x: x[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "qkKil7iP8j5i",
   "metadata": {
    "id": "qkKil7iP8j5i"
   },
   "outputs": [],
   "source": [
    "trips_data = sc.textFile(\"trip.csv\")\n",
    "stations_data = sc.textFile(\"station.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "pfBjILDo6s03",
   "metadata": {
    "id": "pfBjILDo6s03"
   },
   "outputs": [],
   "source": [
    "from typing import NamedTuple\n",
    "from datetime import datetime\n",
    "from functools import reduce\n",
    "\n",
    "def initStations(stations):\n",
    "    class Station(NamedTuple):\n",
    "        station_id: int\n",
    "        name: str\n",
    "        lat: float\n",
    "        long: float\n",
    "        dockcount: int\n",
    "        landmark: str\n",
    "        installation: str\n",
    "    \n",
    "    for station in stations:\n",
    "        yield Station(\n",
    "            station_id = int(station[0]),\n",
    "            name = station[1],\n",
    "            lat = float(station[2]),\n",
    "            long = float(station[3]),\n",
    "            dockcount = int(station[4]),\n",
    "            landmark = station[5],\n",
    "            installation = datetime.strptime(station[6], '%m/%d/%Y')\n",
    "        )\n",
    "\n",
    "def initTrips(trips):\n",
    "    class Trip(NamedTuple):\n",
    "        trip_id: int\n",
    "        duration: int\n",
    "        start_date: datetime\n",
    "        start_station_name: str\n",
    "        start_station_id: int\n",
    "        end_date: datetime\n",
    "        end_station_name: str\n",
    "        end_station_id: int\n",
    "        bike_id: int\n",
    "        subscription_type: str\n",
    "        zip_code: str\n",
    "        \n",
    "    for trip in trips:\n",
    "        try:\n",
    "            yield Trip(                             \n",
    "             trip_id = int(trip[0]),\n",
    "             duration = int(trip[1]),\n",
    "             start_date = datetime.strptime(trip[2], '%m/%d/%Y %H:%M'),\n",
    "             start_station_name = trip[3],\n",
    "             start_station_id = int(trip[4]),\n",
    "             end_date = datetime.strptime(trip[5], '%m/%d/%Y %H:%M'),\n",
    "             end_station_name = trip[6],\n",
    "             end_station_id = trip[7],\n",
    "             bike_id = int(trip[8]),\n",
    "             subscription_type = trip[9],\n",
    "             zip_code = trip[10]\n",
    "            ) \n",
    "        except:\n",
    "            pass\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "694c3fc3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# method to fetch data\n",
    "\n",
    "def GetDataFromTable(data):\n",
    "    columns = data.first()\n",
    "    table = data.filter(lambda row: row != columns)\\\n",
    "                .map(lambda row: row.split(\",\"))\n",
    "    return columns, table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "wGXzsLpV8Uz8",
   "metadata": {
    "id": "wGXzsLpV8Uz8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "id,duration,start_date,start_station_name,start_station_id,end_date,end_station_name,end_station_id,bike_id,subscription_type,zip_code\r\n",
      "4576,63,8/29/2013 14:13,South Van Ness at Market,66,8/29/2013 14:14,South Van Ness at Market,66,520,Subscriber,94127\r\n",
      "4607,70,8/29/2013 14:42,San Jose City Hall,10,8/29/2013 14:43,San Jose City Hall,10,661,Subscriber,95138\r\n",
      "4130,71,8/29/2013 10:16,Mountain View City Hall,27,8/29/2013 10:17,Mountain View City Hall,27,48,Subscriber,97214\r\n",
      "4251,77,8/29/2013 11:29,San Jose City Hall,10,8/29/2013 11:30,San Jose City Hall,10,26,Subscriber,95060\r\n",
      "4299,83,8/29/2013 12:02,South Van Ness at Market,66,8/29/2013 12:04,Market at 10th,67,319,Subscriber,94103\r\n",
      "4927,103,8/29/2013 18:54,Golden Gate at Polk,59,8/29/2013 18:56,Golden Gate at Polk,59,527,Subscriber,94109\r\n",
      "4500,109,8/29/2013 13:25,Santa Clara at Almaden,4,8/29/2013 13:27,Adobe on Almaden,5,679,Subscriber,95112\r\n",
      "4563,111,8/29/2013 14:02,San Salvador at 1st,8,8/29/2013 14:04,San Salvador at 1st,8,687,Subscriber,95112\r\n",
      "4760,113,8/29/2013 17:01,South Van Ness at Market,66,8/29/2013 17:03,South Van Ness at Market,66,553,Subscriber,94103\r\n"
     ]
    }
   ],
   "source": [
    "!head trip.csv"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "cTiH6AJs8xeQ",
   "metadata": {
    "id": "cTiH6AJs8xeQ"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'id,duration,start_date,start_station_name,start_station_id,end_date,end_station_name,end_station_id,bike_id,subscription_type,zip_code'"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trips_data.first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "dyjxgEPu8zvM",
   "metadata": {
    "id": "dyjxgEPu8zvM"
   },
   "outputs": [],
   "source": [
    "trips_headers = trips_data.first()\n",
    "stations_headers = stations_data.first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "eaOAQXD18-pB",
   "metadata": {
    "id": "eaOAQXD18-pB"
   },
   "outputs": [],
   "source": [
    "trips = trips_data.filter(lambda x: x != trips_headers).map(lambda x: x.split(\",\"))\n",
    "\n",
    "stations = stations_data.filter(lambda x: x != stations_headers).map(lambda x: x.split(\",\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "JvpJklUy9tTk",
   "metadata": {
    "id": "JvpJklUy9tTk"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['4576', '63', '8/29/2013 14:13', 'South Van Ness at Market', '66', '8/29/2013 14:14', 'South Van Ness at Market', '66', '520', 'Subscriber', '94127']\n",
      "['4607', '70', '8/29/2013 14:42', 'San Jose City Hall', '10', '8/29/2013 14:43', 'San Jose City Hall', '10', '661', 'Subscriber', '95138']\n",
      "['4130', '71', '8/29/2013 10:16', 'Mountain View City Hall', '27', '8/29/2013 10:17', 'Mountain View City Hall', '27', '48', 'Subscriber', '97214']\n"
     ]
    }
   ],
   "source": [
    "for data in trips.take(3):\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "YNx0zUjX95gz",
   "metadata": {
    "id": "YNx0zUjX95gz"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['2', 'San Jose Diridon Caltrain Station', '37.329732', '-121.90178200000001', '27', 'San Jose', '8/6/2013']\n",
      "['3', 'San Jose Civic Center', '37.330698', '-121.888979', '15', 'San Jose', '8/5/2013']\n",
      "['4', 'Santa Clara at Almaden', '37.333988', '-121.894902', '11', 'San Jose', '8/6/2013']\n"
     ]
    }
   ],
   "source": [
    "for data in stations.take(3):\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "k0_TlVyo9uJI",
   "metadata": {
    "id": "k0_TlVyo9uJI",
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Station(station_id=2, name='San Jose Diridon Caltrain Station', lat=37.329732, long=-121.90178200000001, dockcount=27, landmark='San Jose', installation=datetime.datetime(2013, 8, 6, 0, 0))"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "stations_MP = stations.mapPartitions(initStations)\n",
    "stations_MP.first()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "paMYwIqZ97bM",
   "metadata": {
    "id": "paMYwIqZ97bM"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Trip(trip_id=4576, duration=63, start_date=datetime.datetime(2013, 8, 29, 14, 13), start_station_name='South Van Ness at Market', start_station_id=66, end_date=datetime.datetime(2013, 8, 29, 14, 14), end_station_name='South Van Ness at Market', end_station_id='66', bike_id=520, subscription_type='Subscriber', zip_code='94127')"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trips_MP = trips.mapPartitions(initTrips)\n",
    "trips_MP.first()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "74777f4c",
   "metadata": {
    "id": "74777f4c"
   },
   "source": [
    "# 1 Найти велосипед с максимальным временем пробега."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "998777a3",
   "metadata": {
    "id": "998777a3",
    "outputId": "d74fa7d4-bbe4-487e-e085-7072601328d7"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "535\n"
     ]
    }
   ],
   "source": [
    "bike_top_duration = trips_MP.map(lambda trip: (trip.bike_id, trip.duration))\\\n",
    "                  .reduceByKey(lambda a, b: a + b)\\\n",
    "                  .top(1, key = lambda x: x[1])[0][0]\n",
    "\n",
    "print(bike_top_duration)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f8fc5a8d",
   "metadata": {
    "id": "f8fc5a8d"
   },
   "source": [
    "# 2 Найти наибольшее геодезическое расстояние между станциями."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "6ef5c781",
   "metadata": {
    "id": "6ef5c781"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(229914.0, (26, '16'))]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trips_stations = trips_MP \\\n",
    ".filter(lambda trip: trip.start_station_id != trip.end_station_id) \\\n",
    ".keyBy(lambda trip: (trip.start_station_id, trip.end_station_id)) \\\n",
    ".mapValues(lambda trip: trip.duration)\n",
    "\n",
    "\n",
    "query = trips_stations \\\n",
    ".aggregateByKey((0.0, 0.0), \\\n",
    "                lambda acc, value: (acc[0] + value, acc[1] + 1), \\\n",
    "                lambda acc1, acc2: (acc1[0] + acc2[0], acc1[1] + acc2[1]),) \\\n",
    ".mapValues(lambda values: values[0] / values[1])\n",
    "\n",
    "query.map(lambda x: x[::-1]).top(1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0360e133",
   "metadata": {
    "id": "0360e133"
   },
   "source": [
    "# 3 Найти путь велосипеда с максимальным временем пробега через станции."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "d061bdab",
   "metadata": {
    "id": "d061bdab",
    "outputId": "169670ed-35f7-4146-89ad-7f2ad6ddcc4f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('Yerba Buena Center of the Arts (3rd @ Howard)', 'Townsend at 7th')]\n"
     ]
    }
   ],
   "source": [
    "bike_path = trips_MP.filter(lambda x: x.bike_id == bike_top_duration)\\\n",
    ".sortBy(lambda x: x.start_date)\\\n",
    ".map(lambda x: (x.start_station_name, x.end_station_name))\n",
    "\n",
    "print(bike_path.top(1))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "20b711a3",
   "metadata": {
    "id": "20b711a3"
   },
   "source": [
    "# 4 Найти количество велосипедов в системе."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "3d3b680f",
   "metadata": {
    "id": "3d3b680f",
    "outputId": "6c9756d4-742d-4d1e-ed94-8b6a7f9631ab",
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "700\n"
     ]
    }
   ],
   "source": [
    "print(trips_MP.map(lambda trip: trip.bike_id).distinct().count())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "54d78ffe",
   "metadata": {
    "id": "54d78ffe"
   },
   "source": [
    "# 5 Найти пользователей потративших на поездки более 3 часов."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "4cb68dc8",
   "metadata": {
    "id": "4cb68dc8",
    "outputId": "94baeb52-6ecd-4fc3-f266-411acab0acaf"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['', '58553', '94301', '94039', '94133', '93726', '94123', '4517', '29200', '45322']\n",
      "Count 2101\n"
     ]
    }
   ],
   "source": [
    "threeHours = 3 * 60 * 60\n",
    "\n",
    "users = trips_MP.filter(lambda trip: trip.duration > threeHours).map(lambda trip: trip.zip_code).distinct()\n",
    "\n",
    "print(users.take(10))\n",
    "print(\"Count\", users.count())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "065e10a6",
   "metadata": {
    "id": "065e10a6"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f457f752",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
